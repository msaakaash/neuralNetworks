# -*- coding: utf-8 -*-
"""multiLayerPerceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a3VquREMhKMBCmUL6wR3F78iFGW_hfrz
"""

import numpy as np
class NeuralNetwork():

  def __init__(self,n_features,n_classes,n_hidden):
    self.d = n_features
    self.n = n_classes
    self.h = n_hidden

    #input layer to hidden layer
    self.W1 = np.random.randn(self.d,self.h)
    self.b1 = np.zeros((1,self.h))

    #hidden layer to output layer
    self.W2= np.random.randn(self.h,self.n)
    self.b2 = np.zeros((1,self.n))

    def forward_prop(self,x):
      z1=np.dot(x,self.W1)+self.b1
      A1 = np.maximum(0,z1);

      z2=np.dot(A1,self.W2)+self.b2

      A2=np.exp(z2)
      A2=A2/(np.sum(A2,axis=1,keepdims=True))
      return A1,A2;
    def cel_loss(self,ytrue,ypred):
      num_examples = ytrue.shape[0];
      yij_pij = - np.log(ypred[range(num_examples),y])
      loss=np.sum(yij_pij)/num_examples
      return loss

